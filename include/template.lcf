MEMORY
{
	main	(RWX)	: ORIGIN = 0x100000,	LENGTH = 0x0
	heap	(RW)	: ORIGIN = AFTER(main),	LENGTH = 0x0
}

KEEP_SECTION
{
	.vutext,
	.vudata,
	.vubss
}

#REF_INCLUDE
#{

SECTIONS
{
		#	define for crt0
		_heap_size	= -1;
		_stack	= -1;
		_stack_size	= 0x00100000;
		#	define for lcf
		_align_segment	= 0x80;

	.main	:
	{
		# We can define gp here directly
		_gp = 0x2EF6F0;

		#	text sections
		.	= ALIGN(0x80);
		crt0.s.o	(.text)
		.	= ALIGN(0x10);
		ALIGNALL(0x8);

		######### (.text) .o files ###################

		#<REPLACE_W_TEXT_FILES>

		#GROUP(ROOT)	(.text)
		WRITEW	0x0;	# text section patch for EE pipeline
		WRITEW	0x0;	# text section patch for EE pipeline

		######### (.data) .o files ###################
		__data_start	= .;
		.	= ALIGN(0x80);
		ALIGNALL(0x8);
		#GROUP(ROOT)	(.vutext)
		# TODO: Implement these
		# vutext first
		# crt0 second
		# rest of the data files
		#<REPLACE_W_DATA_FILES>

		######### (.rodata) .o files ###################

		. = ALIGN(0x80);
		ALIGNALL(0x8);
		crt0.s.o (.rodata)

		#<REPLACE_W_RODATA_FILES>

		#ALIGNALL(NUM)
		#RODATA FILE (.rodata)
		# TODO: Figure out pattern for alignall amount, lets just stick to 0x8 for now

		__data_end	= .;
		__data_size	= __data_end - __data_start;

		######### (.sdata) .o files ###################

		. = ALIGN(0x80);
		ALIGNALL(0x4);
		#<REPLACE_W_SDATA_FILES>

		######### (.sbss) .o files ###################
		_fbss	= .;
		. = ALIGN(0x80);
		ALIGNALL(0x4);
		#<REPLACE_W_SBSS_FILES>

		######### (.bss) .o files ###################
		__bss_start	= .;
		. = ALIGN(0x8);
		#crt0.s.o (.bss)
		#<REPLACE_W_BSS_FILES>
		# TODO: Include (COMMON) for .C files
		__bss_end	= .;
		__bss_size	= __bss_end - __bss_start;

		. = ALIGN(0x80);

	}	>	main

	.heap	:
	{
		#	to get the address for heap
		end	= .;
		_end	= .;
	}	>	heap

}
